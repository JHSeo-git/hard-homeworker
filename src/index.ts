import { download } from './download.js';
import { transcription } from './transcription.js';
import { translate, translateBing } from './translate.js';

// const path = await download('https://www.youtube.com/watch?v=o6NSlsVsXHc');
// const path =
//   '/Users/jhseo/Workspace/src/github.com/jhseo-git/hard-homeworker/records/videos/2023-06-18/be-nice-to-devs-or-else.mp4';
// transcription(path);
// const text =
//   "So, uh, I guess Reddit's over? It's weird. The last couple days of Google searching things, clicking links, and having a subreddit is private response come up has been strange, but it's really helped me reflect on how important Reddit is to my everyday work and life. Everything from debugging code stuff to fixing weird artifacts in my video edits to just getting opinions on some new thing that shipped or even old things. The amount I rely on Reddit to find information and get humans opinions on things is massive. And it seems like the AI companies felt the same way because the vast majority of AI is trained on Reddit some amount. It seems like they want to try and make money off that. Sadly, as with most of the things Reddit does, they had no idea what they were doing. Reddit recently announced changes to the API, application protocol interface, the shorthand for how external things access Reddit. Reddit's API is essential for a lot of things. Obviously it's being used to train robots for AI stuff, but it's also used to make Reddit usable, be it accessibility tools for people who need screen reader support or just a good mobile app that actually works. And obviously safety tools in mass. The Reddit API is essential for the work that many do. And for just using Reddit, I personally, when I browse Reddit, never do it on a computer. I use the Narwhal app on my phone. Narwhal and Apollo are the two go-to mobile apps for Reddit. I know Reddit is fun is also pretty popular. And it seems like all three will have to shut their doors down because Reddit's pricing for their API is absurd. Apollo was well within the limits of what Reddit recommended for their API usage. And the lead developer was actually in touch with Reddit and did a great job communicating with them, letting them know when there were bugs, when things were getting hit too much, and just keeping the Reddit API in a good state. His reward for this work was getting accused of blackmail. Seriously, as a fellow CEO, I will never understand how Spez has responded to all of this. God, I just I'm horrified. Truly, it is just disgusting to see a CEO choosing to go after individual community members who are working hard to make his product better. Apollo wasn't made because the developer hates Reddit. Apollo wasn't made because the developer wanted to make money off Reddit. Apollo was made because a developer wanted to get better at iOS, loved Reddit and wanted a better Reddit experience. And he made an app that's won countless design awards, even from Apple directly. In fact, right before the shutdown, he got mentioned in WWDC, Apple's conference. So I can see my Apollo for Reddit. It is surreal to within the same 24 hour window, get shown off at Apple's conference for making an incredible app and then immediately get accused of blackmail by the CEO of the company you made the app for. It's insane. I've never seen this level of cope from a leadership position. Just yesterday, the CEO of Reddit sent an email out to all of the staff that are still there. And obviously it leaked. And it's full of stupid comments like calling out that their revenue isn't down that much since the blackout. Well, yeah, you don't make any money. That's the whole problem. Obviously, when you don't make money, if people stop using your thing, you're still going to make no money. The difference between zero and zero is zero. So yeah, congrats, you're good at math. You figured out that revenue doesn't go down when you don't have revenue. But if you want to IPO spaz, you better get on that because holy hell, this is a disaster. I have never seen sentiment flip so hard and strong for a company. Most of Reddit's currently blacked out. The vast majority of subreddits shut down. They are locked and they will not unlock until these API changes are walked back. And it's not like the demands are crazy. The creator of Apollo didn't think they should prevent charging on the API. He just wanted more than 30 days to plan and ideally a more reasonable rate. And instead of getting either of those things, he got accused of blackmail, which is absurd. I truly cannot believe that Reddit leadership would allow this to happen. But at the same time with the way Ellen pow got thrown out, it doesn't surprise me too much. I think Reddit was kind of doomed from the start. But now more than ever, Ellen wouldn't have done this. I don't think she gets enough credit. She did actually try to make Reddit better, but she never would have done something this absurd spaz consistently has failed to understand, read the room and is very quick to accuse other people of being the problem when in reality, he doesn't know how to make a company that makes money. And it's really sad to see because Reddit is one of the most important resources on the internet. And on this path, it is certainly going to die. I will miss Reddit. I really will. I know we've done a good enough job archiving the decades of knowledge that are on there because I don't think the company that owns Reddit is going to do a good job maintaining it in the future. What do you guys think? Do you expect Reddit to survive this? Or do you think it's gonna go out and die like it currently is? If you want to hear a bit more about platforms killing themselves like Twitch, I'll put a video here all about that. Thank you as always. Peace nerds.";

// const path = await download('https://www.youtube.com/watch?v=cEMSGF6hGmg');
// const path =
//   '/Users/jhseo/Workspace/src/github.com/jhseo-git/hard-homeworker/records/videos/2023-06-21/typescript-isnt-real-and-thats-okay.mp4';
// transcription(path);
const text =
  "If you all know anything about me, you probably know that I love TypeScript. It's a phenomenal language. Except let's be fair. Is it really a language? TypeScript can't be run. You can't take TypeScript code and run it. You have to transpile it into JavaScript before it can run because TypeScript isn't a real language. TypeScript is a way to write JavaScript with a bunch of additional syntax. And in the end, effectively TypeScript is a linter. It runs over your code. What does this mean and how does this affect you as a TypeScript developer? Let's talk a bit about it. First thing is important to define a linter. The term linter is usually used to describe a process that runs over your code to check for specific things. Linters can check for anything from are your semicolons in the right place to are you using tabs correctly to are you awaiting your promises when you execute them and all of these types of things are where linters are really strong. TypeScript doesn't seem like that though, right? Like its role isn't to check your code. Wait, it kind of is, but its role isn't to tell you how to write the code. Wait, it kind of can be. And here's where things start to get blurry. A lot of what linters and things like ESLint have traditionally been used for has a lot of overlap with the goals of TypeScript. And in the end, both of these things are trying to make it so that we as developers can think less about the rules that can be programmed away out of our minds. And that's why both ESLint and TypeScript are so strong and such essential parts of the stacks that we build in, because there's a bunch of different things that can go wrong in our code that are pretty easy for a compiler and a checker of some form to notice and catch us on. Like if we have an import that's not being used or we don't have an import that is being used, these types of things are relatively easy for things running over our code to check and catch as we write it. And this is where TypeScript strengths really shine is what you get when you run TypeScript over your code. You could argue that only half of TypeScript is a linter because TypeScript has two very distinct parts. One of those parts is the compiler that converts TypeScript into JavaScript. And one could argue that that compiler's mere existence means that TypeScript isn't just a linter. It is a compiler. It is a language. It is a way to write code that becomes different code. And then being just that it is a language. But the value that we get out of TypeScript is not from the compilation step, the value that we get from TypeScript is in the checking step, because you can compile your TypeScript, even if all your types are wrong and still get JavaScript output. But the type checker is a separate thing that lets you know when your expectations and assumptions around your types are wrong, actually gives you the red squiggly lines that we've all grown to know and love. Because TypeScript is two parts, it is confusing to categorize and define in these ways. It really was different in that sense. From day one, TypeScript was both a compiler and a syntax checker. And most of what we associate with and think about when we talk about TypeScript is the syntax and the checking that comes with it. And as such, most of what we are experiencing when we use TypeScript every day is not the TypeScript compiler or language. It's the TypeScript linter. Because of that, I think it's fair to say TypeScript is just a linter because that's how we experience it. If you like this video and you want to hear more about the weird and incorrect ways people use TypeScript, got a video about all those right there. If you want to check it out. Thank you guys as always. Peace nerds.";

async function start() {
  const translated = await translate(text);

  console.log(translated);
}

start();
